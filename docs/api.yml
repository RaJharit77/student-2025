openapi: 3.0.3
info:
  title: Student Course Management API
  description: API for managing student groups and students.
  version: 1.0.1
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEIRAJO2/course-student-management-2/1.0.1

paths:
  /groups:
    get:
      summary: Retrieve all groups
      description: Retrieve groups with optional filters by groupName or groupYear.
      parameters:
        - name: groupName
          in: query
          description: Filter groups by their name.
          schema:
            type: string
        - name: groupYear
          in: query
          description: Filter groups by a range of years.
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful response with a list of groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'

    post:
      summary: Create a new group
      requestBody:
        description: Group to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroup'
      responses:
        '201':
          description: Group created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'

    put:
      summary: Update an existing group
      description: Idempotent update of group details.
      requestBody:
        description: Group to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Group updated successfully.

    delete:
      summary: Delete a group
      parameters:
        - name: groupId
          in: query
          description: ID of the group to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Group deleted successfully.

  /students:
    get:
      summary: Retrieve all students
      description: Retrieve students with optional filters by studentName.
      parameters:
        - name: studentName
          in: query
          description: Filter students by their name.
          schema:
            type: string
      responses:
        '200':
          description: Successful response with a list of students.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'

    post:
      summary: Create a new student
      requestBody:
        description: Student to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudent'
      responses:
        '201':
          description: Student created successfully.

    put:
      summary: Update an existing student
      description: Idempotent update of student details.
      requestBody:
        description: Student to be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Student updated successfully.

    delete:
      summary: Delete a student
      parameters:
        - name: studentId
          in: query
          description: ID of the student to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Student deleted successfully.

  /students/{studentId}/group:
    put:
      summary: Assign a student to a group
      description: Assign a student to a specific group (modifying the group of an individual student).
      requestBody:
        description: Group to be assigned to the student.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Student's group updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'

  /students/group:
    put:
      summary: Assign multiple students to a group
      description: Assign multiple students to a specific group (modifying the group for multiple students).
      requestBody:
        description: List of students with their corresponding group.
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AssignStudentToGroup'
      responses:
        '200':
          description: Multiple students' groups updated successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'

components:
  schemas:
    Group:
      type: object
      properties:
        id:
          type: string
        groupName:
          type: string
        groupYear:
          type: string
          format: date
        promotion:
          type: string
          enum: [G, H, J, K]
        studentNb:
          type: integer
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'

    Student:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum: [M, F]
        birthdate:
          type: string
          format: date
        reference:
          type: string
          example: STD23XXX
        group:
          type: string
          example: J2

    CreateGroup:
      allOf:
        - $ref: '#/components/schemas/Group'
        - type: object
          required: [groupName, groupYear]

    CreateStudent:
      allOf:
        - $ref: '#/components/schemas/Student'
        - type: object
          required: [name, group]

    AssignStudentToGroup:
      type: object
      properties:
        studentId:
          type: string
        group:
          type: string
